security:
  enable_authenticator_manager: true

  role_hierarchy:
    ROLE_ADMIN:  [ROLE_EDITOR, ROLE_USER]
    ROLE_EDITOR: [ROLE_USER]

  password_hashers:
    App\Entity\Users:
      algorithm: auto

  providers:
    app_user_provider:
      entity:
        class: App\Entity\Users
        property: email

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    login:
      pattern: ^/api/login
      stateless: true
      json_login:
        check_path: /api/login
        username_path: email
        password_path: password
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

    api:
      pattern: ^/api
      stateless: true
      jwt: ~

  access_control:
    - { path: ^/api/login$, roles: PUBLIC_ACCESS }
    - { path: ^/api/register$, roles: PUBLIC_ACCESS }

    # Lecture films (auth requise)
    - { path: ^/api/movies/suggest$, roles: ROLE_USER, methods: [GET] }
    - { path: ^/api/movies/\d+$,     roles: ROLE_USER, methods: [GET] }
    - { path: ^/api/movies$,         roles: ROLE_USER, methods: [GET] }

    # Création / édition (éditeur & admin)
    - { path: ^/api/movies$,         roles: [ROLE_EDITOR, ROLE_ADMIN], methods: [POST] }
    - { path: ^/api/movies/\d+$,     roles: [ROLE_EDITOR, ROLE_ADMIN], methods: [PUT, PATCH] }

    # Suppression: admin uniquement
    - { path: ^/api/movies/\d+$,     roles: ROLE_ADMIN, methods: [DELETE] }

    # Admin utilisateurs
    - { path: ^/api/admin,           roles: ROLE_ADMIN }

    # Par défaut
    - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
